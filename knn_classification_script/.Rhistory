#
#
#
#
#
rm(list=ls())
install.packages("MASS")
library(MASS)
head(cats)
hist(cats$Bwt)
colnames(cats)
colnames(cats) <- c("Gender", "BodyWeight", "HeartWeight")
summary(cats)
factor(set$var, levels = c("F", "M"), labels  = c("Female", "Male"))
factor(cats$Gender, levels = c("F", "M"), labels  = c("Female", "Male"))
summary(cats)
pairs(cats, upper.panel=panel.cor,diag,panel=panel.hist)
pairs(cats, upper.panel=panel.cor,diag.panel=panel.hist)
pairs(cats, upper.panel=panel.cor,diag.panel=panel.hist)
pairs(cats, upper.panel = panel.cor,diag.panel=panel.hist)
knitr::opts_chunk$set(echo = TRUE)
summary(cervical)
setwd("C:/Users/Srikant/Desktop/Data Science/Week 5/Case Study 2")
source("./myfunctionsaug.R")
library(dplyr)
library(stringr)
cervical <- read.csv("./ccdataMod.csv")
summary(cervical)
dim(cervical)
str(cervical)
glimpse(cervical)
head(cervical)
BIC(lm(cervical$age~cervical$stds_number_of_diagnosis))
analysisstds <- BIC(lm(cervical$age~cervical$stds_number_of_diagnosis))
analysisstds <- BIC(lm(cervical$age~cervical$stds_number_of_diagnosis))
summary(analysisstds)
analysisstdss <- lm(cervical$age~cervical$stds_number_of_diagnosis)
BIC(analysisstdss)
analysisstdss <- lm(cervical$age~cervical$stds_number_of_diagnosis)
BIC(analysisstdss)
analysisstdss
analysisstdss <- lm(cervical$age~cervical$stds_number_of_diagnosis)
BIC(analysisstdss)
analysisstdss
plot(cervical$age~cervical$stds_number_of_diagnosis)
analysisstdss <- lm(cervical$age~cervical$stds_number_of_diagnosis)
BIC(analysisstdss)
analysisstdss
plot(cervical$age~cervical$stds_number_of_diagnosis)
abline(analysisstdss)
analysisstdss <- lm(cervical$stds_number_of_diagnosis~cervical$age)
BIC(analysisstdss)
analysisstdss
plot(cervical$stds_number_of_diagnosis~cervical$age)
abline(analysisstdss)
summary(cervical)
dim(cervical)
str(cervical)
glimpse(cervical)
head(cervical)
names(cervical)
for(i in 1:858){
if(cervical[i, 30] == TRUE){
value = cervical[i, 7] + value
number = number + 1
}
else{
value = value
}
}
for(i in 1:858){
if(cervical[i, 30] == TRUE){
value <- cervical[i, 7] + value
number <- number + 1
}
else{
value <- value
}
}
value <- 0
for(i in 1:858){
if(cervical[i, 30] == TRUE){
value <- cervical[i, 7] + value
number <- number + 1
}
else{
value <- value
}
}
value <- 0
number <- 0
for(i in 1:858){
if(cervical[i, 30] == TRUE){
value <- cervical[i, 7] + value
number <- number + 1
}
else{
value <- value
}
}
value <- 0
number <- 0
for(i in 1:858){
if(cervical[i, 30] == TRUE){
value <- cervical[i, 7] + value
number <- number + 1
}
else{
value <- value
}
}
value
number
value <- 0
number <- 0
value2 <- 0
number2 <- 0
#Column 30 is the column indicating whether the subject has cancer and column 7 is the column indicating the number of pregnancies of the subject
for(i in 1:858){
if(cervical[i, 30] == TRUE){
value <- cervical[i, 7] + value
number <- number + 1
}
else{
value2 <- value2 + cervical[i, 7]
number2 <- number2 +1
}
}
value
number
value2
number2
value <- 0
number <- 0
value2 <- 0
number2 <- 0
#Column 30 is the column indicating whether the subject has cancer and column 7 is the column indicating the number of pregnancies of the subject
for(i in 1:858){
if(cervical[i, 30] == TRUE){
value <- cervical[i, 7] + value
number <- number + 1
}
else{
value2 <- value2 + cervical[i, 7]
number2 <- number2 +1
}
}
mean_cervical_cancer <- value/number
mean_no_cervical_cancer <- value2/number2
value
number
value2
number2
value <- 0
number <- 0
value2 <- 0
number2 <- 0
#Column 30 is the column indicating whether the subject has cancer and column 7 is the column indicating the number of pregnancies of the subject
for(i in 1:858){
if(cervical[i, 30] == TRUE){
value <- cervical[i, 7] + value
number <- number + 1
}
else{
value2 <- value2 + cervical[i, 7]
number2 <- number2 +1
}
}
mean_cervical_cancer <- value/number
mean_no_cervical_cancer <- value2/number2
mean_cervical_cancer
mean_no_cervical_cancer
value <- 0
numberofhpv <- 0
value2 <- 0
numberofhpv2 <- 0
#Column 30 is the column indicating whether the subject has cancer and column 7 is the column indicating the number of pregnancies of the subject
for(i in 1:858){
if(cervical[i, 30] == TRUE){
if(cervical[i, 29] == TRUE){
numberofhpv <- numberofhpv + 1
value <- value +1
}
else{
numberofhpv <- numberofhpv
value <- value +1
}
else{
value <- 0
numberofhpv <- 0
value2 <- 0
numberofhpv2 <- 0
#Column 30 is the column indicating whether the subject has cancer and column 7 is the column indicating the number of pregnancies of the subject
for(i in 1:858){
if(cervical[i, 30] == TRUE){
if(cervical[i, 29] == TRUE){
numberofhpv <- numberofhpv + 1
value <- value +1
}
else{
numberofhpv <- numberofhpv
value <- value +1
}
else{
value <- 0
numberofhpv <- 0
value2 <- 0
numberofhpv2 <- 0
#Column 30 is the column indicating whether the subject has cancer and column 7 is the column indicating the number of pregnancies of the subject
for(i in 1:858){
if(cervical[i, 30] == TRUE){
if(cervical[i, 29] == TRUE){
numberofhpv <- numberofhpv + 1
value <- value +1
}
else{
numberofhpv <- numberofhpv
value <- value +1
}
else{
value <- 0
numberofhpv <- 0
value2 <- 0
numberofhpv2 <- 0
#Column 30 is the column indicating whether the subject has cancer and column 7 is the column indicating the number of pregnancies of the subject
for(i in 1:858){
if(cervical[i, 30] == TRUE){
if(cervical[i, 29] == TRUE){
numberofhpv <- numberofhpv + 1
value <- value +1
}
else{
numberofhpv <- numberofhpv
value <- value +1
}
else{
value <- 0
numberofhpv <- 0
value2 <- 0
numberofhpv2 <- 0
#Column 30 is the column indicating whether the subject has cancer and column 7 is the column indicating the number of pregnancies of the subject
for(i in 1:858){
if(cervical[i, 30] == TRUE){
if(cervical[i, 29] == TRUE){
numberofhpv <- numberofhpv + 1
value <- value +1
}
else{
numberofhpv <- numberofhpv
value <- value +1
}
}
else{
if(cervical[i, 29] == TRUE){
numberofhpv2 <- numberofhpv2 + 1
value2 <- value2 +1
}
else{
numberofhpv2 <- numberofhpv2
value2 <- value2 +1
}
}
}
mean_cervical_cancer <- value/number
mean_no_cervical_cancer <- value2/number2
mean_cervical_cancer
mean_no_cervical_cancer
value <- 0
numberofhpv <- 0
value2 <- 0
numberofhpv2 <- 0
#Column 30 is the column indicating whether the subject has cancer and column 7 is the column indicating the number of pregnancies of the subject
for(i in 1:858){
if(cervical[i, 30] == TRUE){
if(cervical[i, 29] == TRUE){
numberofhpv <- numberofhpv + 1
value <- value +1
}
else{
numberofhpv <- numberofhpv
value <- value +1
}
}
else{
if(cervical[i, 29] == TRUE){
numberofhpv2 <- numberofhpv2 + 1
value2 <- value2 +1
}
else{
numberofhpv2 <- numberofhpv2
value2 <- value2 +1
}
}
}
value
value2
value <- 0
numberofhpv <- 0
value2 <- 0
numberofhpv2 <- 0
#Column 30 is the column indicating whether the subject has cancer and column 7 is the column indicating the number of pregnancies of the subject
for(i in 1:858){
if(cervical[i, 30] == TRUE){
if(cervical[i, 29] == TRUE){
numberofhpv <- numberofhpv + 1
value <- value +1
}
else{
numberofhpv <- numberofhpv
value <- value +1
}
}
else{
if(cervical[i, 29] == TRUE){
numberofhpv2 <- numberofhpv2 + 1
value2 <- value2 +1
}
else{
numberofhpv2 <- numberofhpv2
value2 <- value2 +1
}
}
}
value
value2
numberofhpv
numberofhpv2
value <- 0
numberofhpv <- 0
value2 <- 0
numberofhpv2 <- 0
#Column 30 is the column indicating whether the subject has cancer and column 7 is the column indicating the number of pregnancies of the subject
for(i in 1:858){
if(cervical[i, 30] == TRUE){
if(cervical[i, 29] == TRUE){
numberofhpv <- numberofhpv + 1
value <- value +1
}
else{
numberofhpv <- numberofhpv
value <- value +1
}
}
else{
if(cervical[i, 29] == TRUE){
numberofhpv2 <- numberofhpv2 + 1
value2 <- value2 +1
}
else{
numberofhpv2 <- numberofhpv2
value2 <- value2 +1
}
}
}
averagehpvcancer <- numberofhpv/value
averagehpvnocancer <- numberofhpv2/value2
averagehpvcancer
averagehpvnocancer
cervical <- arrange(cervical, age)
CrossTable(x = dataset.testLabels, y = data_pred, prop.chisq=FALSE)
rm(list = ls())
options(warn=-1)
library(class)
library(ggvis)
library(gmodels)
library(tidyverse)
library(caret)
library(GGally)
library(gridExtra)
setwd("C:/Users/Srikant/Desktop/Data Science/Week 10")
dataset <- read.csv("./ecoli.csv")
#Names (in header of csv) were taken from the documentation of the dataset and manually entered into the .csv file
summary(dataset)
#There is no missing data within the dataset
head(dataset)
glimpse(dataset)
tail(dataset)
#scatterplots
dataset %>% ggvis(~mcg, ~gvh, fill = ~unknown) %>% layer_points()
dataset %>% ggvis(~alm1, ~alm2, fill= ~unknown) %>% layer_points()
short <- dataset[, c(2:3, 9)]
short1 <- dataset[, c(6:8, 9)]
ggpairs(short, aes(color=(unknown)))
ggpairs(short1, aes(color=(unknown)))
#set seed for randomization
set.seed(12345)
#Create new column with values 1-8 which will allow us to numerically identify the values in the "unknown" column
dataset <- mutate(dataset, variable_class = as.numeric(dataset$unknown))
summary(dataset)
#Split the dataset into 1s and 2s (indexing)
ind <- sample(2, nrow(dataset), replace=TRUE, prob=c(.65, .35))
ind
#We are omitting the intrinsically binary values as well as the factor values (euclidean distance cannot be calculated with such values in place)
dataset.training <- dataset[ind==1, c(2:3, 6:8, 10)]
dataset.test <- dataset[ind==2, c(2:3, 6:8, 10)]
summary(dataset.test)
summary(dataset.training)
dataset.trainLabels <- na.omit(dataset[ind==1, 10])
dataset.testLabels <- na.omit(dataset[ind==2, 10])
#building the model
data_pred <- knn(train = dataset.training, test = dataset.test, cl = dataset.trainLabels, k=1)
data_pred
merge <- data.frame(dataset.testLabels, data_pred)
dim(merge)
names <- colnames(dataset.test)
names
final_data <- cbind(dataset.test, merge)
names(final_data) <- c(names, "Observed Class", "Predicted Class")
head(final_data)
view(final_data)
CrossTable(x = dataset.testLabels, y = data_pred, prop.chisq=FALSE)
CrossTable(x = dataset.testLabels, y = data_pred, prop.chisq=FALSE)
data_pred
merge <- data.frame(dataset.testLabels, data_pred)
dim(merge)
names <- colnames(dataset.test)
names
final_data <- cbind(dataset.test, merge)
names(final_data) <- c(names, "Observed Class", "Predicted Class")
head(final_data)
view(final_data)
CrossTable(x = dataset.testLabels, y = data_pred, prop.chisq=FALSE)
